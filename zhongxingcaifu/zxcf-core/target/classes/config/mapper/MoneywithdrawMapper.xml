<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zxcf.core.mapper.MoneywithdrawMapper">
  <resultMap id="BaseResultMap" type="com.zxcf.core.entity.Moneywithdraw">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="auditTime" jdbcType="TIMESTAMP" property="audittime" />
    <result column="applyTime" jdbcType="TIMESTAMP" property="applytime" />
    <result column="auditor_id" jdbcType="BIGINT" property="auditorId" />
    <result column="applier_id" jdbcType="BIGINT" property="applierId" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="fee" jdbcType="DECIMAL" property="fee" />
    <result column="bankName" jdbcType="VARCHAR" property="bankname" />
    <result column="accountName" jdbcType="VARCHAR" property="accountname" />
    <result column="accountNumber" jdbcType="VARCHAR" property="accountnumber" />
    <result column="forkName" jdbcType="VARCHAR" property="forkname" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, state, remark, auditTime, applyTime, auditor_id, applier_id, amount, fee, bankName, 
    accountName, accountNumber, forkName
  </sql>
  <select id="selectByExample" parameterType="com.zxcf.core.entity.MoneywithdrawExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from moneywithdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from moneywithdraw
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from moneywithdraw
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.zxcf.core.entity.MoneywithdrawExample">
    delete from moneywithdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zxcf.core.entity.Moneywithdraw">
    insert into moneywithdraw (id, state, remark, 
      auditTime, applyTime, auditor_id, 
      applier_id, amount, fee, 
      bankName, accountName, accountNumber, 
      forkName)
    values (#{id,jdbcType=BIGINT}, #{state,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR}, 
      #{audittime,jdbcType=TIMESTAMP}, #{applytime,jdbcType=TIMESTAMP}, #{auditorId,jdbcType=BIGINT}, 
      #{applierId,jdbcType=BIGINT}, #{amount,jdbcType=DECIMAL}, #{fee,jdbcType=DECIMAL}, 
      #{bankname,jdbcType=VARCHAR}, #{accountname,jdbcType=VARCHAR}, #{accountnumber,jdbcType=VARCHAR}, 
      #{forkname,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zxcf.core.entity.Moneywithdraw">
    insert into moneywithdraw
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="audittime != null">
        auditTime,
      </if>
      <if test="applytime != null">
        applyTime,
      </if>
      <if test="auditorId != null">
        auditor_id,
      </if>
      <if test="applierId != null">
        applier_id,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="bankname != null">
        bankName,
      </if>
      <if test="accountname != null">
        accountName,
      </if>
      <if test="accountnumber != null">
        accountNumber,
      </if>
      <if test="forkname != null">
        forkName,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="audittime != null">
        #{audittime,jdbcType=TIMESTAMP},
      </if>
      <if test="applytime != null">
        #{applytime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditorId != null">
        #{auditorId,jdbcType=BIGINT},
      </if>
      <if test="applierId != null">
        #{applierId,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="bankname != null">
        #{bankname,jdbcType=VARCHAR},
      </if>
      <if test="accountname != null">
        #{accountname,jdbcType=VARCHAR},
      </if>
      <if test="accountnumber != null">
        #{accountnumber,jdbcType=VARCHAR},
      </if>
      <if test="forkname != null">
        #{forkname,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zxcf.core.entity.MoneywithdrawExample" resultType="java.lang.Long">
    select count(*) from moneywithdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update moneywithdraw
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.audittime != null">
        auditTime = #{record.audittime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.applytime != null">
        applyTime = #{record.applytime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.auditorId != null">
        auditor_id = #{record.auditorId,jdbcType=BIGINT},
      </if>
      <if test="record.applierId != null">
        applier_id = #{record.applierId,jdbcType=BIGINT},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.fee != null">
        fee = #{record.fee,jdbcType=DECIMAL},
      </if>
      <if test="record.bankname != null">
        bankName = #{record.bankname,jdbcType=VARCHAR},
      </if>
      <if test="record.accountname != null">
        accountName = #{record.accountname,jdbcType=VARCHAR},
      </if>
      <if test="record.accountnumber != null">
        accountNumber = #{record.accountnumber,jdbcType=VARCHAR},
      </if>
      <if test="record.forkname != null">
        forkName = #{record.forkname,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update moneywithdraw
    set id = #{record.id,jdbcType=BIGINT},
      state = #{record.state,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR},
      auditTime = #{record.audittime,jdbcType=TIMESTAMP},
      applyTime = #{record.applytime,jdbcType=TIMESTAMP},
      auditor_id = #{record.auditorId,jdbcType=BIGINT},
      applier_id = #{record.applierId,jdbcType=BIGINT},
      amount = #{record.amount,jdbcType=DECIMAL},
      fee = #{record.fee,jdbcType=DECIMAL},
      bankName = #{record.bankname,jdbcType=VARCHAR},
      accountName = #{record.accountname,jdbcType=VARCHAR},
      accountNumber = #{record.accountnumber,jdbcType=VARCHAR},
      forkName = #{record.forkname,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zxcf.core.entity.Moneywithdraw">
    update moneywithdraw
    <set>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="audittime != null">
        auditTime = #{audittime,jdbcType=TIMESTAMP},
      </if>
      <if test="applytime != null">
        applyTime = #{applytime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditorId != null">
        auditor_id = #{auditorId,jdbcType=BIGINT},
      </if>
      <if test="applierId != null">
        applier_id = #{applierId,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null">
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="bankname != null">
        bankName = #{bankname,jdbcType=VARCHAR},
      </if>
      <if test="accountname != null">
        accountName = #{accountname,jdbcType=VARCHAR},
      </if>
      <if test="accountnumber != null">
        accountNumber = #{accountnumber,jdbcType=VARCHAR},
      </if>
      <if test="forkname != null">
        forkName = #{forkname,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zxcf.core.entity.Moneywithdraw">
    update moneywithdraw
    set state = #{state,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR},
      auditTime = #{audittime,jdbcType=TIMESTAMP},
      applyTime = #{applytime,jdbcType=TIMESTAMP},
      auditor_id = #{auditorId,jdbcType=BIGINT},
      applier_id = #{applierId,jdbcType=BIGINT},
      amount = #{amount,jdbcType=DECIMAL},
      fee = #{fee,jdbcType=DECIMAL},
      bankName = #{bankname,jdbcType=VARCHAR},
      accountName = #{accountname,jdbcType=VARCHAR},
      accountNumber = #{accountnumber,jdbcType=VARCHAR},
      forkName = #{forkname,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>